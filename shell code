#!/bin/bash
set -x
# Variables
BUCKET_NAME="Rakesh-unique-s3-bucket"
SNS_TOPIC_NAME="S3UploadNotificationTopic"
EMAIL="rakee06041995@gmail.com"
LAMBDA_NAME="S3UploadNotificationLambda"
ROLE_NAME="LambdaS3SNSRole"
LAMBDA_ZIP="lambda.zip"
LAMBDA_HANDLER="lambda_function.lambda_handler"
AWS_REGION="us-east-1"

# 1. Create S3 bucket
aws s3api create-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION --create-bucket-configuration LocationConstraint=$AWS_REGION
echo "S3 Bucket $BUCKET_NAME created successfully!"

# 2. Create SNS Topic and subscribe email
SNS_TOPIC_ARN=$(aws sns create-topic --name "$SNS_TOPIC_NAME" --output text)
aws sns subscribe --topic-arn "$SNS_TOPIC_ARN" --protocol email --notification-endpoint "$EMAIL"
echo "SNS Topic $SNS_TOPIC_NAME created and email subscription added. Confirm your email subscription!"

# 3. Create IAM Role for Lambda
ROLE_ARN=$(aws iam create-role --role-name "$ROLE_NAME" --assume-role-policy-document '{
    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Principal": {
            "Service": "lambda.amazonaws.com"
        },
        "Action": "sts:AssumeRole"
    }
}' --output text --query 'Role.Arn')
aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
aws iam attach-role-policy --role-name "$ROLE_NAME" --policy-arn arn:aws:iam::aws:policy/AmazonSNSFullAccess
echo "IAM Role $ROLE_NAME created and policies attached."

# 4. Create Lambda Function Code
cat <<EOL > lambda_function.py
import json
import boto3

def lambda_handler(event, context):
    sns = boto3.client('sns')
    bucket_name = event['Records'][0]['s3']['bucket']['name']
    file_name = event['Records'][0]['s3']['object']['key']
    message = f"File {file_name} has been uploaded to bucket {bucket_name}."
    sns.publish(TopicArn='$SNS_TOPIC_ARN', Message=message, Subject='S3 File Upload Notification')
    return {'statusCode': 200, 'body': json.dumps('Notification sent!')}
EOL

# 5. Zip the Lambda function and create Lambda function
zip $LAMBDA_ZIP lambda_function.py
aws lambda create-function --function-name "$LAMBDA_NAME" \
  --zip-file fileb://$LAMBDA_ZIP --handler "$LAMBDA_HANDLER" \
  --runtime python3.9 --role "$ROLE_ARN"
echo "Lambda function $LAMBDA_NAME created!"

# 6. Add permission for S3 to invoke Lambda
LAMBDA_ARN=$(aws lambda get-function --function-name "$LAMBDA_NAME" --output text --query 'Configuration.FunctionArn')
aws lambda add-permission --function-name "$LAMBDA_NAME" \
  --statement-id s3invoke --action "lambda:InvokeFunction" \
  --principal s3.amazonaws.com --source-arn "arn:aws:s3:::$BUCKET_NAME"
echo "Permission added for S3 to invoke Lambda."

# 7. Configure S3 to trigger Lambda on object creation
aws s3api put-bucket-notification-configuration --bucket "$BUCKET_NAME" \
  --notification-configuration '{
    "LambdaFunctionConfigurations": [
      {
        "LambdaFunctionArn": "'"$LAMBDA_ARN"'",
        "Events": ["s3:ObjectCreated:*"]
      }
    ]
  }'
echo "S3 bucket $BUCKET_NAME configured to trigger Lambda on file upload."

# 8. Clean up
rm lambda_function.py $LAMBDA_ZIP
